from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.keyboards import settings as settings_keyboard, general as general_keyboard
from app.states import Settings as SettingsStates
from core.settings import json_settings

router = Router()


def format_time_unit(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω"
    elif seconds < 86400:
        hours = seconds // 3600
        return f"{hours} —á"
    else:
        days = seconds // 86400
        return f"{days} –¥–Ω"


def seconds_to_minutes(seconds: int) -> int:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã"""
    return seconds // 60


def minutes_to_seconds(minutes: int) -> int:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã"""
    return minutes * 60


@router.callback_query(F.data == "settings")
async def settings_menu(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()

    await callback.message.edit_text(
        text="*Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
        reply_markup=settings_keyboard.menu()
    )


@router.callback_query(F.data == "settings_pauses")
async def settings_pauses(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        pause_after_rate = await json_settings.async_get_attribute("pause_after_rate_reposts")
        number_reposts = await json_settings.async_get_attribute("number_reposts_before_pause") 
        pause_between = await json_settings.async_get_attribute("pause_between_reposts")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        settings_text = f"""*Ô∏è‚É£ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—É–∑:

üîÑ –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–æ—Ä–º—ã —Ä–µ–ø–æ—Å—Ç–æ–≤: {format_time_unit(pause_after_rate)}
üìä –ö–æ–ª-–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤ –¥–æ –ø–∞—É–∑—ã: {number_reposts} —à—Ç
‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–ø–æ—Å—Ç–∞–º–∏: {format_time_unit(pause_between)}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"""
        
    except Exception as e:
        settings_text = "*Ô∏è‚É£ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        text=settings_text,
        reply_markup=settings_keyboard.pauses_menu()
    )


@router.callback_query(F.data == "pause_after_rate_reposts")
async def set_pause_after_rate_reposts(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(SettingsStates.set_settings_pause)
    await state.update_data(callback_data=callback.data, input_unit="minutes")

    try:
        current_value = await json_settings.async_get_attribute(callback.data)
        current_minutes = seconds_to_minutes(current_value)
        
        hint_text = f"""*Ô∏è‚É£ –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–æ—Ä–º—ã —Ä–µ–ø–æ—Å—Ç–æ–≤

–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_minutes} –º–∏–Ω—É—Ç

‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö:
"""
            
    except Exception:
        hint_text = "*Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö:"

    await callback.message.edit_text(
        text=hint_text,
        reply_markup=general_keyboard.back(callback_data="settings_pauses")
    )


@router.callback_query(F.data == "pause_between_reposts")
async def set_pause_between_reposts(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(SettingsStates.set_settings_pause)
    await state.update_data(callback_data=callback.data, input_unit="minutes")

    try:
        current_value = await json_settings.async_get_attribute(callback.data)
        current_minutes = seconds_to_minutes(current_value)
        
        hint_text = f"""*Ô∏è‚É£ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–ø–æ—Å—Ç–∞–º–∏

–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_minutes} –º–∏–Ω—É—Ç

‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö:
"""
            
    except Exception:
        hint_text = "*Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö:"

    await callback.message.edit_text(
        text=hint_text,
        reply_markup=general_keyboard.back(callback_data="settings_pauses")
    )


@router.callback_query(F.data == "number_reposts_before_pause")
async def set_number_reposts_before_pause(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(SettingsStates.set_settings_pause)
    await state.update_data(callback_data=callback.data, input_unit="count")

    try:
        current_value = await json_settings.async_get_attribute(callback.data)
        
        hint_text = f"""*Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤ –¥–æ –ø–∞—É–∑—ã

–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value} —à—Ç

üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:
"""
            
    except Exception:
        hint_text = "*Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"

    await callback.message.edit_text(
        text=hint_text,
        reply_markup=general_keyboard.back(callback_data="settings_pauses")
    )


@router.message(SettingsStates.set_settings_pause)
async def settings_pause(message: Message, state: FSMContext) -> None:
    state_data = await state.get_data()
    callback_data = state_data["callback_data"]
    input_unit = state_data.get("input_unit", "seconds")
    await state.clear()
    
    try:
        user_input = int(message.text)
        if user_input <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        error_text = "*Ô∏è‚É£ –û—à–∏–±–∫–∞!\n\n"
        if input_unit == "minutes":
            error_text += "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç"
        elif input_unit == "count":
            error_text += "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–µ–ø–æ—Å—Ç–æ–≤"
        else:
            error_text += "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
            
        await message.answer(
            text=error_text,
            reply_markup=general_keyboard.back(callback_data="settings_pauses")
        )
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if input_unit == "minutes":
        final_value = minutes_to_seconds(user_input)
    else:
        final_value = user_input

    await json_settings.async_set_attribute(item=callback_data, value=final_value)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    if callback_data == "pause_after_rate_reposts":
        success_text = f"‚úÖ –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–æ—Ä–º—ã —Ä–µ–ø–æ—Å—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {user_input} –º–∏–Ω—É—Ç"
    elif callback_data == "number_reposts_before_pause":
        success_text = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤ –¥–æ –ø–∞—É–∑—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {user_input} —à—Ç"
    elif callback_data == "pause_between_reposts":
        success_text = f"‚úÖ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–ø–æ—Å—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {user_input} –º–∏–Ω—É—Ç"
    else:
        success_text = "‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    
    await message.answer(
        text=success_text,
        reply_markup=general_keyboard.back(callback_data="settings_pauses")
    )


@router.callback_query(F.data == "settings_stop_link")
async def settings_stop_link(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫
    try:
        stop_links = await json_settings.async_get_attribute("stop_links")
        if not stop_links:
            stop_links = []
        count = len(stop_links)
        settings_text = f"*Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫\n\n–í—Å–µ–≥–æ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫: {count} —à—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    except Exception:
        settings_text = "*Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫:"
    
    await callback.message.edit_text(
        text=settings_text,
        reply_markup=settings_keyboard.stop_link_menu()
    )


@router.callback_query(F.data == "add_stop_link")
async def add_stop_link(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(SettingsStates.add_stop_link)
    await callback.message.edit_text(
        text="*Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É(–∏) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\nüí° –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
        reply_markup=general_keyboard.back(callback_data="settings_stop_link")
    )


@router.message(SettingsStates.add_stop_link)
async def add_stop_link_state(message: Message, state: FSMContext) -> None:
    await state.clear()
    stop_links = await json_settings.async_get_attribute("stop_links")
    if stop_links is None:
        stop_links = []
    
    added_count = 0
    if "\n" in message.text:
        for i in message.text.split("\n"):
            if i.strip():  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                stop_links.append(i.strip())
                added_count += 1
    else:
        stop_links.append(message.text.strip())
        added_count += 1
        
    await json_settings.async_set_attribute("stop_links", stop_links)
    await message.answer(
        text=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —à—Ç —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫!\n–í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {len(stop_links)} —à—Ç",
        reply_markup=general_keyboard.back(callback_data="settings_stop_link")
    )


@router.callback_query(F.data == "del_stop_link")
async def del_stop_link(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.edit_text(
        text="*Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/del_stop_link <—Å—Å—ã–ª–∫–∞>",
        reply_markup=general_keyboard.back(callback_data="settings_stop_link")
    )


@router.callback_query(F.data == "show_stop_links")
async def show_stop_links(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    stop_links = await json_settings.async_get_attribute("stop_links")
    if not stop_links:
        stop_links = []
    
    if len(stop_links) == 0:
        text = "*Ô∏è‚É£ –°—Ç–æ–ø-—Å—Å—ã–ª–∫–∏\n\n‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    else:
        text = f"*Ô∏è‚É£ –°—Ç–æ–ø-—Å—Å—ã–ª–∫–∏ ({len(stop_links)} —à—Ç):\n\n"
        for i, stop_link in enumerate(stop_links, 1):
            text += f"{i}. {stop_link}\n"
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(text) > 4000:
        text = text[:3900] + f"\n\n... –∏ –µ—â—ë {len(stop_links) - 50} —Å—Å—ã–ª–æ–∫"

    await callback.message.edit_text(
        text=text,
        reply_markup=general_keyboard.back(callback_data="settings_stop_link")
    )


@router.message(Command("del_stop_link"))
async def del_stop_link_state(message: Message, state: FSMContext, command: CommandObject) -> None:
    await state.clear()
    if not command.args:
        await message.answer(
            text="*Ô∏è‚É£ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:\n/del_stop_link <—Å—Å—ã–ª–∫–∞>",
            reply_markup=general_keyboard.back(callback_data="settings_stop_link")
        )
        return
        
    try:
        stop_links = await json_settings.async_get_attribute("stop_links")
        if not stop_links:
            stop_links = []
            
        if command.args in stop_links:
            stop_links.remove(command.args)
            await json_settings.async_set_attribute("stop_links", stop_links)
            await message.answer(
                text=f"‚úÖ –°—Ç–æ–ø-—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n–û—Å—Ç–∞–ª–æ—Å—å –≤ –±–∞–∑–µ: {len(stop_links)} —à—Ç",
                reply_markup=general_keyboard.back(callback_data="settings_stop_link")
            )
        else:
            await message.answer(
                text="‚ùå –¢–∞–∫–æ–π —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ!",
                reply_markup=general_keyboard.back(callback_data="settings_stop_link")
            )
    except Exception as e:
        await message.answer(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}",
            reply_markup=general_keyboard.back(callback_data="settings_stop_link")
        )


@router.callback_query(F.data == "set_new_reaction")
async def set_new_reaction(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é
    try:
        current_reaction = await json_settings.async_get_attribute("reaction")
        reaction_map = {
            "love": "‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ",
            "ask": "üôè –ú–æ–ª—å–±–∞", 
            "like": "üëç –õ–∞–π–∫"
        }
        current_text = reaction_map.get(current_reaction, current_reaction)
        settings_text = f"*Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–π\n\n–¢–µ–∫—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è: {current_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é:"
    except Exception:
        settings_text = "*Ô∏è‚É£ –ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é:"

    await callback.message.edit_text(
        text=settings_text,
        reply_markup=settings_keyboard.reaction_menu()
    )


@router.callback_query(F.data == "reaction_love")
@router.callback_query(F.data == "reaction_ask")
@router.callback_query(F.data == "reaction_like")
async def set_reaction(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()

    reaction_type = callback.data.replace("reaction_", "")
    await json_settings.async_set_attribute("reaction", reaction_type)
    
    reaction_map = {
        "love": "‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ",
        "ask": "üôè –ú–æ–ª—å–±–∞", 
        "like": "üëç –õ–∞–π–∫"
    }
    
    await callback.message.edit_text(
        text=f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è: {reaction_map[reaction_type]}",
        reply_markup=general_keyboard.back(callback_data="set_new_reaction")
    )


@router.callback_query(F.data == "set_new_work_time")
async def set_new_work_time(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    try:
        start_time = await json_settings.async_get_attribute("start_time")
        end_time = await json_settings.async_get_attribute("end_time")
        settings_text = f"*Ô∏è‚É£ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\nüåÖ –ù–∞—á–∞–ª–æ: {start_time}\nüåá –ö–æ–Ω–µ—Ü: {end_time}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    except Exception:
        settings_text = "*Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        text=settings_text,
        reply_markup=settings_keyboard.new_time_work_menu()
    )


@router.callback_query(F.data == "set_start_time")
@router.callback_query(F.data == "set_end_time")
async def set_time(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(SettingsStates.set_time)
    await state.update_data(callback_data=callback.data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
    try:
        if callback.data == "set_start_time":
            current_time = await json_settings.async_get_attribute("start_time")
            hint_text = f"*Ô∏è‚É£ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_time}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 09:00"
        else:
            current_time = await json_settings.async_get_attribute("end_time")
            hint_text = f"*Ô∏è‚É£ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_time}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 18:00"
    except Exception:
        hint_text = "*Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
    
    await callback.message.edit_text(
        text=hint_text,
        reply_markup=general_keyboard.back(callback_data="set_new_work_time")
    )


@router.message(SettingsStates.set_time)
async def set_time_state(message: Message, state: FSMContext) -> None:
    state_data = await state.get_data()
    await state.clear()
    
    try:
        user_time = datetime.strptime(message.text, '%H:%M').time().strftime('%H:%M')
    except ValueError:
        await message.answer(
            text="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 09:30",
            reply_markup=general_keyboard.back(callback_data="set_new_work_time")
        )
        return
    
    if state_data["callback_data"] == "set_start_time":
        json_key = "start_time"
        time_type = "–Ω–∞—á–∞–ª–∞"
    else:
        json_key = "end_time"
        time_type = "–æ–∫–æ–Ω—á–∞–Ω–∏—è"

    await json_settings.async_set_attribute(json_key, user_time)
    
    await message.answer(
        text=f"‚úÖ –í—Ä–µ–º—è {time_type} —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {user_time}",
        reply_markup=general_keyboard.back(callback_data="set_new_work_time")
    )