import asyncio
from datetime import datetime, timedelta
from typing import List, Dict
from loguru import logger

from core.models import tg_account as tg_account_db
from core.schemas import tg_account as tg_account_schemas
from core.settings import settings


class PauseRestorer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ø–∞—É–∑"""
    
    def __init__(self):
        self.check_interval = 1200  # 20 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.running = False
        self.last_check = None
        self.stats = {
            'total_checks': 0,
            'total_restored': 0,
            'last_restored_count': 0
        }
    
    async def check_and_restore_expired_pauses(self) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏—Å—Ç—ë–∫—à–∏–º–∏ –ø–∞—É–∑–∞–º–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        check_start = datetime.now()
        self.stats['total_checks'] += 1
        
        result = {
            'timestamp': check_start,
            'checked_accounts': 0,
            'restored_accounts': 0,
            'restored_phones': [],
            'still_paused': 0,
            'errors': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –º—É—Ç–µ
            muted_accounts = await tg_account_db.get_tg_accounts_by_status("MUTED")
            result['checked_accounts'] = len(muted_accounts)
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(muted_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –º—É—Ç–µ –Ω–∞ –∏—Å—Ç—ë–∫—à–∏–µ –ø–∞—É–∑—ã")
            
            current_time = datetime.now()
            
            for account in muted_accounts:
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–∞—É–∑—ã
                    if not account.last_datetime_pause or not account.pause_in_seconds:
                        logger.debug(f"–ê–∫–∫–∞—É–Ω—Ç +{account.phone_number} –≤ –º—É—Ç–µ –±–µ–∑ –ø–∞—É–∑—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—É–∑—ã
                    pause_end_time = account.last_datetime_pause + timedelta(seconds=account.pause_in_seconds)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–∞—É–∑–∞
                    if current_time >= pause_end_time:
                        logger.info(f"‚è∞ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–∫–∫–∞—É–Ω—Ç +{account.phone_number} (–ø–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞)")
                        
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        await tg_account_db.update_tg_account(
                            tg_account=account,
                            tg_account_update=tg_account_schemas.TGAccountUpdate(
                                last_datetime_pause=None,
                                pause_in_seconds=None,
                                status=tg_account_schemas.TGAccountStatus.working
                            )
                        )
                        
                        result['restored_accounts'] += 1
                        result['restored_phones'].append(account.phone_number)
                        self.stats['total_restored'] += 1
                        
                        logger.success(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç +{account.phone_number} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    else:
                        # –ê–∫–∫–∞—É–Ω—Ç –≤—Å—ë –µ—â—ë –Ω–∞ –ø–∞—É–∑–µ
                        result['still_paused'] += 1
                        remaining_seconds = (pause_end_time - current_time).total_seconds()
                        remaining_minutes = remaining_seconds / 60
                        
                        logger.debug(f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç +{account.phone_number}: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_minutes:.1f} –º–∏–Ω—É—Ç")
                
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ +{account.phone_number}: {e}"
                    logger.error(error_msg)
                    result['errors'].append(error_msg)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['last_restored_count'] = result['restored_accounts']
            self.last_check = check_start
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['restored_accounts'] > 0:
                logger.success(f"üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {result['restored_accounts']}")
                logger.info(f"üì± –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join([f'+{phone}' for phone in result['restored_phones']])}")
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            if result['still_paused'] > 0:
                logger.info(f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—Å—ë –µ—â—ë –Ω–∞ –ø–∞—É–∑–µ: {result['still_paused']}")
            
            return result
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—É–∑: {e}"
            logger.error(error_msg)
            result['errors'].append(error_msg)
            return result
    
    async def send_notification_if_needed(self, restore_result: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã"""
        if restore_result['restored_accounts'] == 0:
            return
        
        try:
            from core.settings import bot
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""üîÑ **–ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤**
            
‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restore_result['restored_accounts']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
            
            if restore_result['errors']:
                message += f"\n\n‚ö†Ô∏è **–û—à–∏–±–∫–∏:** {len(restore_result['errors'])}"
            
            await bot.send_message(
                chat_id=settings.admin_chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.success("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def run_continuous_check(self) -> None:
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç"""
        self.running = True
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—É–∑ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval/60:.0f} –º–∏–Ω—É—Ç)")
        
        while self.running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                result = await self.check_and_restore_expired_pauses()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await self.send_notification_if_needed(result)
                
                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.debug(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval/60:.0f} –º–∏–Ω—É—Ç")
                await asyncio.sleep(self.check_interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥—ë–º –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
                await asyncio.sleep(60)
        
        self.running = False
        logger.info("üèÅ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.running = False
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        return {
            'running': self.running,
            'last_check': self.last_check,
            'check_interval_minutes': self.check_interval / 60,
            **self.stats
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—è
pause_restorer = PauseRestorer()


async def start_pause_restorer() -> None:
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        await pause_restorer.run_continuous_check()
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")


def stop_pause_restorer() -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    pause_restorer.stop()
