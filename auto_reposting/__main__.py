import asyncio
import random
from datetime import datetime
from typing import Optional, Tuple, List

from aiogram import Dispatcher
from app.handlers import setup_routes
from loguru import logger
from telethon import TelegramClient, errors
from telethon.errors import UserAlreadyParticipantError, FloodWaitError, FloodError
from telethon.errors.rpcerrorlist import FloodWaitError as FloodWaitError2
from telethon.events import NewMessage
from telethon.tl.functions.channels import JoinChannelRequest

from core.models import tg_account as tg_account_db, channel as channel_db
from auto_reposting import telegram_utils, telegram_utils2
from auto_pause_restorer import start_pause_restorer, stop_pause_restorer, pause_restorer
from core.settings import json_settings, bot
from auto_reposting.channel_processor import channel_processor
from core.schemas import tg_account as tg_account_schemas

log_file_name = datetime.now().strftime("%Y-%m-%d_%H-%M-%S") + ".log"


class ListenerAccountManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏-—Å–ª—É—à–∞—Ç–µ–ª—è–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.current_client: Optional[TelegramClient] = None
        self.current_account: Optional[tg_account_db.TGAccount] = None
        self.current_account_index: int = 0
        self.available_accounts: List[tg_account_db.TGAccount] = []
        self.max_retry_attempts = 3
        
    async def get_available_accounts(self) -> List[tg_account_db.TGAccount]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        all_accounts = await tg_account_db.get_tg_accounts_by_status("WORKING")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã: —É–±–∏—Ä–∞–µ–º —Ç–µ —á—Ç–æ –Ω–∞ –ø–∞—É–∑–µ
        available = []
        for account in all_accounts:
            if account.last_datetime_pause and account.pause_in_seconds:
                if not await tg_account_db.has_pause_paused(account):
                    continue  # –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–∞—É–∑–µ
            available.append(account)
            
        return available
    
    async def switch_to_next_account(self) -> Tuple[Optional[TelegramClient], Optional[tg_account_db.TGAccount]]:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.current_client:
            try:
                await self.current_client.disconnect()
                logger.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç +{self.current_account.phone_number if self.current_account else 'Unknown'}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.current_client = None
            self.current_account = None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.available_accounts = await self.get_available_accounts()
        
        if not self.available_accounts:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!")
            return None, None
        
        # –ü—Ä–æ–±—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        attempts = 0
        while attempts < len(self.available_accounts):
            if self.current_account_index >= len(self.available_accounts):
                self.current_account_index = 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞
                
            account = self.available_accounts[self.current_account_index]
            
            try:
                client = await telegram_utils2.create_tg_client(account)
                
                if client is None:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è +{account.phone_number}")
                    self.current_account_index += 1
                    attempts += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                async with client:
                    try:
                        await client.get_me()
                        self.current_client = client
                        self.current_account = account
                        logger.success(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç-—Å–ª—É—à–∞—Ç–µ–ª—å: +{account.phone_number}")
                        return client, account
                    except (errors.UnauthorizedError, errors.PhoneNumberInvalidError, errors.AuthKeyDuplicatedError):
                        logger.warning(f"üóëÔ∏è –ê–∫–∫–∞—É–Ω—Ç +{account.phone_number} –ø–æ—Ç–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —É–¥–∞–ª—è—é –∏–∑ –ë–î")
                        await tg_account_db.update_tg_account(
                            tg_account=account,
                            tg_account_update=tg_account_schemas.TGAccountUpdate(
                                status=tg_account_schemas.TGAccountStatus.deleted
                            )
                        )
                        await client.disconnect()
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ +{account.phone_number}: {e}")
                
            self.current_account_index += 1
            attempts += 1
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫!")
        return None, None
    
    async def handle_client_error(self, error: Exception) -> Tuple[Optional[TelegramClient], Optional[tg_account_db.TGAccount]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –õ–Æ–ë–£–Æ –æ—à–∏–±–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π"""
        if self.current_account:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞ +{self.current_account.phone_number}: {error}")
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            
            # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
            if isinstance(error, (errors.UnauthorizedError, errors.PhoneNumberInvalidError, errors.AuthKeyDuplicatedError)):
                logger.warning(f"üóëÔ∏è –ü–æ–º–µ—á–∞—é –∞–∫–∫–∞—É–Ω—Ç +{self.current_account.phone_number} –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π")
                await tg_account_db.update_tg_account(
                    tg_account=self.current_account,
                    tg_account_update=tg_account_schemas.TGAccountUpdate(
                        status=tg_account_schemas.TGAccountStatus.deleted
                    )
                )
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–≤–∫–ª—é—á–∞—è FROZEN_METHOD_INVALID, FloodWait) - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        self.current_account_index += 1
        return await self.switch_to_next_account()


def is_within_work_time(current_time, start, end):
    if start < end:
        return start <= current_time < end
    else:
        return current_time >= start or current_time < end


async def check_subscribe_in_channels_simple(client: TelegramClient, account: tg_account_db.TGAccount) -> None:
    """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        for channel in await channel_db.get_channels():
            try:
                tg_channel = await client.get_entity(channel.url)
                await client(JoinChannelRequest(tg_channel))
                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {channel.url}")
                
            except UserAlreadyParticipantError:
                logger.debug(f"üë§ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel.url}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel.url}: {e}")
                # –õ—é–±–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                raise Exception(f"Subscription error for account +{account.phone_number}: {e}")
                    
            await asyncio.sleep(random.randint(1, 2))  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è +{account.phone_number}: {e}")
        raise  # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞


async def setup_fresh_dispatcher() -> Dispatcher:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —á–∏—Å—Ç—ã–º–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏"""
    dp = Dispatcher()
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∑–∞–Ω–æ–≤–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        import importlib
        from app.handlers import menu, accounts, channel, settings, stats
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
        importlib.reload(menu)
        importlib.reload(accounts) 
        importlib.reload(channel)
        importlib.reload(settings)
        importlib.reload(stats)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –Ω–æ–≤–æ–º—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        dp.include_router(menu.router)
        dp.include_router(accounts.router)
        dp.include_router(channel.router) 
        dp.include_router(settings.router)
        dp.include_router(stats.router)
        
        logger.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return dp
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
        raise


async def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –±–æ—Ç (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + —Ä–µ–ø–æ—Å—Ç–∏–Ω–≥) —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ router is attached
    dp = await setup_fresh_dispatcher()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤-—Å–ª—É—à–∞—Ç–µ–ª–µ–π
    listener_manager = ListenerAccountManager()
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    bot_task = asyncio.create_task(dp.start_polling(bot))
    logger.success("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤...")
    await channel_processor.start()
    logger.success("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—É–∑
    pause_restorer_task = None
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—É–∑...")
        pause_restorer_task = asyncio.create_task(start_pause_restorer())
        logger.success("‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—É–∑ –∑–∞–ø—É—â–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –∫–ª–∏–µ–Ω—Ç-—Å–ª—É—à–∞—Ç–µ–ª—å
            random_telegram_client, random_tg_account = await listener_manager.switch_to_next_account()

            if random_telegram_client is None:
                logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç...")
                await asyncio.sleep(300)
                continue

            try:
                await random_telegram_client.connect()
                logger.success(f"üéß –°–ª—É—à–∞—é —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç: +{random_tg_account.phone_number}")

                @random_telegram_client.on(NewMessage)
                async def new_message(event: NewMessage.Event) -> None:
                    try:
                        message_id = event.original_update.message.id
                        channel_id = event.original_update.message.peer_id.channel_id

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                        channels = await channel_db.get_channels()
                        if channel_id not in [channel.telegram_channel_id for channel in channels]:
                            return

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
                    try:
                        current_time = datetime.now().time()
                        start_time = datetime.strptime(await json_settings.async_get_attribute("start_time"), "%H:%M").time()
                        end_time = datetime.strptime(await json_settings.async_get_attribute("end_time"), "%H:%M").time()

                        if not is_within_work_time(current_time, start_time, end_time):
                            logger.info("–ù–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!")
                            return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                        return

                    logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ CHANNEL ID: {channel_id} MESSAGE ID: {message_id}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                    try:
                        success = await channel_processor.add_message(channel_id, message_id)

                        if success:
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
                            stats = channel_processor.get_stats()
                            logger.info(f"üìä –û—á–µ—Ä–µ–¥—å: {stats['total_queue_size']}, –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {stats['total_processed']}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

                # üîß –ü–†–û–°–¢–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ª—é–±–∞—è –æ—à–∏–±–∫–∞ = –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                try:
                    await check_subscribe_in_channels_simple(client=random_telegram_client, account=random_tg_account)
                    logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è +{random_tg_account.phone_number}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è +{random_tg_account.phone_number}: {e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç")
                    await listener_manager.handle_client_error(e)
                    continue

                # –†–∞–±–æ—Ç–∞–µ–º –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏
                await random_telegram_client.run_until_disconnected()
                
            except Exception as e:
                logger.warning(f"‚ùå –õ–Æ–ë–ê–Ø –æ—à–∏–±–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º +{random_tg_account.phone_number}: {e}")
                logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç")
                await listener_manager.handle_client_error(e)
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
                continue

        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            continue

    # Cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
    if 'bot_task' in locals() and not bot_task.done():
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        bot_task.cancel()
        try:
            await bot_task
        except asyncio.CancelledError:
            pass

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await channel_processor.stop()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    if pause_restorer_task:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—É–∑...")
        stop_pause_restorer()
        try:
            await asyncio.wait_for(pause_restorer_task, timeout=5.0)
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            pause_restorer_task.cancel()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ª—É—à–∞—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
    if listener_manager.current_client and listener_manager.current_client.is_connected():
        try:
            await listener_manager.current_client.disconnect()
            logger.info("üîå –ö–ª–∏–µ–Ω—Ç-—Å–ª—É—à–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞-—Å–ª—É—à–∞—Ç–µ–ª—è: {e}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    try:
        await dp.stop_polling()
        logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")


if __name__ == "__main__":
    logger.add(f"logs/{log_file_name}", rotation="1 day", retention="10 days", compression="zip")

    while True:
        try:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—É—Å–∫–æ–º
            import gc
            gc.collect()
            
            asyncio.run(main())
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except Exception as e:
            logger.exception(f"üí• –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô: {e.__class__.__name__}: {e}")

        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        asyncio.run(asyncio.sleep(30))
