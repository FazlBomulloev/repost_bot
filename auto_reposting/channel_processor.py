import asyncio
from datetime import datetime
from typing import Dict, Set, Optional
from dataclasses import dataclass
from loguru import logger

from core.models import channel as channel_db, tg_account as tg_account_db


@dataclass
class ChannelTask:
    channel_id: int
    message_id: int
    timestamp: datetime


class ChannelWorker:
    """–í–æ—Ä–∫–µ—Ä, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º"""
    
    def __init__(self, channel_guid: str, channel_url: str, worker_id: int):
        self.channel_guid = channel_guid
        self.channel_url = channel_url
        self.worker_id = worker_id
        self.task_queue = asyncio.Queue(maxsize=100)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
        self.running = False
        self.processed_count = 0
        self.error_count = 0
        self.current_task = None
        self.logger = logger.bind(worker_id=worker_id, channel=channel_url)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        self.running = True
        self.logger.info(f"üöÄ –í–æ—Ä–∫–µ—Ä {self.worker_id} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_url}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        workers = []
        num_parallel_workers = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        
        for i in range(num_parallel_workers):
            worker_task = asyncio.create_task(self._worker_loop(i + 1))
            workers.append(worker_task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        try:
            await asyncio.gather(*workers)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–∞—Ö –∫–∞–Ω–∞–ª–∞: {e}")
        finally:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for task in workers:
                if not task.done():
                    task.cancel()
    
    async def _worker_loop(self, sub_worker_id: int):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–¥-–≤–æ—Ä–∫–µ—Ä–∞"""
        sub_logger = self.logger.bind(sub_worker=sub_worker_id)
        sub_logger.info(f"üî• –ü–æ–¥-–≤–æ—Ä–∫–µ—Ä {sub_worker_id} –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                task = await asyncio.wait_for(
                    self.task_queue.get(), 
                    timeout=10.0
                )
                
                self.current_task = task
                await self._process_channel_task(task, sub_logger)
                self.task_queue.task_done()
                self.processed_count += 1
                self.current_task = None
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                sub_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ–¥-–≤–æ—Ä–∫–µ—Ä–µ: {e}")
                self.error_count += 1
                self.current_task = None
                await asyncio.sleep(1)
    
    async def _process_channel_task(self, task: ChannelTask, sub_logger):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        start_time = datetime.now()
        sub_logger.info(f"üì® –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {task.message_id}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ process_post3.py
            from process_post3 import new_message_in_channel
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            await new_message_in_channel(
                telegram_channel_id=task.channel_id,
                telegram_message_id=task.message_id
            )
            
            processing_time = (datetime.now() - start_time).total_seconds()
            sub_logger.success(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {task.message_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.1f} —Å–µ–∫")
            
        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            sub_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {task.message_id} –∑–∞ {processing_time:.1f} —Å–µ–∫: {e}")
            self.error_count += 1
            raise
    
    async def add_task(self, channel_id: int, message_id: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞"""
        try:
            task = ChannelTask(
                channel_id=channel_id,
                message_id=message_id,
                timestamp=datetime.now()
            )
            
            self.task_queue.put_nowait(task)
            self.logger.info(f"‚ûï –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞. –†–∞–∑–º–µ—Ä: {self.task_queue.qsize()}")
            return True
            
        except asyncio.QueueFull:
            self.logger.error(f"üö´ –û—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞ {self.channel_url} –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = False
        self.logger.info(f"üõë –í–æ—Ä–∫–µ—Ä {self.worker_id} –∫–∞–Ω–∞–ª–∞ {self.channel_url} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_count}")
    
    def get_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        return {
            'worker_id': self.worker_id,
            'channel_guid': self.channel_guid,
            'channel_url': self.channel_url,
            'processed_count': self.processed_count,
            'error_count': self.error_count,
            'running': self.running,
            'queue_size': self.task_queue.qsize(),
            'current_task': {
                'channel_id': self.current_task.channel_id if self.current_task else None,
                'message_id': self.current_task.message_id if self.current_task else None,
                'started_at': self.current_task.timestamp if self.current_task else None
            } if self.current_task else None
        }


class ChannelProcessor:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self):
        self.channel_workers: Dict[str, ChannelWorker] = {}  # channel_guid -> worker
        self.worker_tasks: Dict[str, asyncio.Task] = {}
        self.running = False
        self.start_time = datetime.now()
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.processing_messages: Dict[str, Set[tuple]] = {}  # channel_guid -> set of (channel_id, message_id)
        
        logger.info("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤")
    
    async def _channel_has_accounts(self, channel_guid: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∫–∞–Ω–∞–ª–∞ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        try:
            accounts = await tg_account_db.get_working_accounts_by_channel(channel_guid)
            return len(accounts) > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_guid}: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        self.running = True
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã
        channels = await channel_db.get_channels()
        
        if not channels:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        active_channels = 0
        for i, channel in enumerate(channels):
            channel_guid = str(channel.guid)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —É –∫–∞–Ω–∞–ª–∞
            if await self._channel_has_accounts(channel_guid):
                worker = ChannelWorker(
                    channel_guid=channel_guid,
                    channel_url=channel.url,
                    worker_id=i + 1
                )
                
                self.channel_workers[channel_guid] = worker
                self.processing_messages[channel_guid] = set()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                task = asyncio.create_task(worker.start())
                self.worker_tasks[channel_guid] = task
                
                active_channels += 1
                logger.info(f"‚úÖ –í–æ—Ä–∫–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url}")
            else:
                logger.info(f"‚è≠Ô∏è –ö–∞–Ω–∞–ª {channel.url} –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        logger.success(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {active_channels} –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
    
    async def ensure_worker_for_channel(self, channel_guid: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã"""
        if channel_guid in self.channel_workers:
            return True  # –í–æ—Ä–∫–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
        if not await self._channel_has_accounts(channel_guid):
            logger.info(f"–ù–µ —Å–æ–∑–¥–∞—é –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_guid} - –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = await channel_db.get_channel_by_guid(channel_guid)
            if not channel:
                logger.error(f"–ö–∞–Ω–∞–ª {channel_guid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            worker_id = len(self.channel_workers) + 1
            worker = ChannelWorker(
                channel_guid=channel_guid,
                channel_url=channel.url,
                worker_id=worker_id
            )
            
            self.channel_workers[channel_guid] = worker
            self.processing_messages[channel_guid] = set()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            task = asyncio.create_task(worker.start())
            self.worker_tasks[channel_guid] = task
            
            logger.success(f"üéâ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_guid}: {e}")
            return False
    
    async def remove_worker_if_no_accounts(self, channel_guid: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤–æ—Ä–∫–µ—Ä –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if channel_guid not in self.channel_workers:
            return True  # –í–æ—Ä–∫–µ—Ä–∞ –∏ —Ç–∞–∫ –Ω–µ—Ç
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
        if await self._channel_has_accounts(channel_guid):
            return False  # –ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, –≤–æ—Ä–∫–µ—Ä –Ω—É–∂–µ–Ω
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            worker = self.channel_workers[channel_guid]
            worker.stop()
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            if channel_guid in self.worker_tasks:
                task = self.worker_tasks[channel_guid]
                if not task.done():
                    task.cancel()
                del self.worker_tasks[channel_guid]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
            del self.channel_workers[channel_guid]
            if channel_guid in self.processing_messages:
                del self.processing_messages[channel_guid]
            
            logger.info(f"üóëÔ∏è –í–æ—Ä–∫–µ—Ä –∫–∞–Ω–∞–ª–∞ {worker.channel_url} —É–¥–∞–ª–µ–Ω - –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞ {channel_guid}: {e}")
            return False
    
    async def add_message(self, channel_id: int, message_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        """
        if not self.running:
            logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return False
        
        # –ù–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ telegram_channel_id
        try:
            channel = await channel_db.get_channel_by_telegram_channel_id(channel_id)
            if not channel:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return False
            
            channel_guid = str(channel.guid)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤–æ—Ä–∫–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not await self.ensure_worker_for_channel(channel_guid):
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url}")
                return False
            
            # –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ—Ä–∫–µ—Ä
            if channel_guid not in self.channel_workers:
                logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            message_key = (channel_id, message_id)
            if message_key in self.processing_messages[channel_guid]:
                logger.warning(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∫–∞–Ω–∞–ª–∞ {channel.url} —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            worker = self.channel_workers[channel_guid]
            success = await worker.add_task(channel_id, message_id)
            
            if success:
                self.processing_messages[channel_guid].add(message_key)
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
                asyncio.create_task(self._cleanup_processed_message(channel_guid, message_key, delay=3600))
                
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–æ—Ä–∫–µ—Ä—É –∫–∞–Ω–∞–ª–∞ {channel.url}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _cleanup_processed_message(self, channel_guid: str, message_key: tuple, delay: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥"""
        try:
            await asyncio.sleep(delay)
            if channel_guid in self.processing_messages:
                self.processing_messages[channel_guid].discard(message_key)
                logger.debug(f"üßπ –û—á–∏—â–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_guid}: {message_key}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π: {e}")
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.channel_workers:
            return {
                'running': self.running,
                'channels_count': 0,
                'total_processed': 0,
                'total_errors': 0,
                'workers': []
            }
        
        total_processed = sum(worker.processed_count for worker in self.channel_workers.values())
        total_errors = sum(worker.error_count for worker in self.channel_workers.values())
        uptime = (datetime.now() - self.start_time).total_seconds()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ—Ä–∫–µ—Ä–∞–º
        workers_stats = [worker.get_stats() for worker in self.channel_workers.values()]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
        active_channels = sum(1 for w in self.channel_workers.values() if w.current_task is not None)
        total_queue_size = sum(w.task_queue.qsize() for w in self.channel_workers.values())
        
        return {
            'running': self.running,
            'uptime_seconds': uptime,
            'channels_count': len(self.channel_workers),
            'active_channels': active_channels,
            'total_queue_size': total_queue_size,
            'total_processed': total_processed,
            'total_errors': total_errors,
            'success_rate': (total_processed / (total_processed + total_errors) * 100) if (total_processed + total_errors) > 0 else 0,
            'messages_per_hour': (total_processed / (uptime / 3600)) if uptime > 0 else 0,
            'workers': workers_stats
        }
    
    def get_channel_stats(self, channel_guid: str) -> Optional[dict]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if channel_guid in self.channel_workers:
            return self.channel_workers[channel_guid].get_stats()
        return None
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.running:
            return
            
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã
        for worker in self.channel_workers.values():
            worker.stop()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
        for channel_guid, worker in self.channel_workers.items():
            try:
                await asyncio.wait_for(worker.task_queue.join(), timeout=30.0)
                logger.debug(f"‚úÖ –û—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞ {worker.channel_url} –æ—á–∏—â–µ–Ω–∞")
            except asyncio.TimeoutError:
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–∞–Ω–∞–ª–∞ {worker.channel_url}")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
        for task in self.worker_tasks.values():
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if self.worker_tasks:
            try:
                await asyncio.wait(self.worker_tasks.values(), timeout=10.0)
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è")
        
        self.running = False
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.get_stats()
        logger.success(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ö–∞–Ω–∞–ª–æ–≤: {stats['channels_count']}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_processed']}")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        self.channel_workers.clear()
        self.worker_tasks.clear()
        self.processing_messages.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
channel_processor = ChannelProcessor()