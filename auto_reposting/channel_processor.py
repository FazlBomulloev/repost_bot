import asyncio
from datetime import datetime
from typing import Dict, Set, Optional, List
from dataclasses import dataclass
from loguru import logger
import random

from core.models import channel as channel_db, tg_account as tg_account_db
from auto_reposting import telegram_utils2
from core.settings import json_settings


@dataclass
class ChannelTask:
    channel_id: int
    message_id: int
    timestamp: datetime


class ChannelWorker:
    """–í–æ—Ä–∫–µ—Ä —Å –ü–û–°–¢–û–Ø–ù–ù–´–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–æ—Ç–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self, channel_guid: str, channel_url: str, worker_id: int):
        self.channel_guid = channel_guid
        self.channel_url = channel_url
        self.worker_id = worker_id
        self.task_queue = asyncio.Queue()
        self.running = False
        self.processed_count = 0
        self.error_count = 0
        self.current_task = None
        
        # üéØ –ü–û–°–¢–û–Ø–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –†–û–¢–ê–¶–ò–ò (–ù–ï –û–ë–ù–£–õ–Ø–ï–¢–°–Ø!)
        self.current_account_index = 0
        self.current_account_reposts = 0
        self.current_account = None
        self.available_accounts = []
        self.last_accounts_refresh = None
        
        # –ö—ç—à –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.account_groups_cache: Dict[int, Set[str]] = {}  
        
        self.logger = logger.bind(worker_id=worker_id, channel=channel_url)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = True
        self.logger.info(f"üöÄ –í–æ—Ä–∫–µ—Ä {self.worker_id} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_url}")
        
        while self.running:
            try:
                task = await asyncio.wait_for(
                    self.task_queue.get(), 
                    timeout=10.0
                )
                
                self.current_task = task
                await self._process_channel_task_with_rotation(task)
                self.task_queue.task_done()
                self.processed_count += 1
                self.current_task = None
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ: {e}")
                self.error_count += 1
                self.current_task = None
                await asyncio.sleep(1)
    
    async def refresh_available_accounts(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è)"""
        now = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if (self.last_accounts_refresh is None or 
            (now - self.last_accounts_refresh).total_seconds() > 300):
            
            self.available_accounts = await tg_account_db.get_working_accounts_by_channel(self.channel_guid)
            self.last_accounts_refresh = now
            
            self.logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.available_accounts)} –¥–æ—Å—Ç—É–ø–Ω–æ")
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            if self.current_account_index >= len(self.available_accounts):
                self.current_account_index = 0
                self.current_account_reposts = 0
                self.logger.info("üîÑ –°–±—Ä–æ—à–µ–Ω –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    async def get_current_working_account(self):
        await self.refresh_available_accounts()
        
        if not self.available_accounts:
            self.logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            number_reposts_before_pause = await json_settings.async_get_attribute("number_reposts_before_pause")
            pause_after_rate_reposts = await json_settings.async_get_attribute("pause_after_rate_reposts")
        except:
            number_reposts_before_pause = 15
            pause_after_rate_reposts = 3600
        
        # üîÑ –ü–†–û–í–ï–†–Ø–ï–ú –ù–£–ñ–ù–û –õ–ò –ü–ï–†–ï–ö–õ–Æ–ß–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢
        if self.current_account_reposts >= number_reposts_before_pause:
            # –°—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–∞—É–∑—É
            if (self.current_account_index < len(self.available_accounts) and 
                self.current_account_reposts > 0):
                
                old_account = self.available_accounts[self.current_account_index]
                await tg_account_db.add_pause(old_account, pause_after_rate_reposts)
                
                self.logger.warning(f"‚è∏Ô∏è –ê–∫–∫–∞—É–Ω—Ç +{old_account.phone_number} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ ({self.current_account_reposts}), –ø–∞—É–∑–∞ {pause_after_rate_reposts//60} –º–∏–Ω")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            self.current_account_index += 1
            self.current_account_reposts = 0
        
        # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ò–ô –ê–ö–ö–ê–£–ù–¢ –ù–ê FROZEN_METHOD_INVALID
        max_attempts = len(self.available_accounts)
        attempts = 0
        
        while attempts < max_attempts:
            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã - –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            if self.current_account_index >= len(self.available_accounts):
                self.current_account_index = 0
                
            candidate_account = self.available_accounts[self.current_account_index]
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
            test_client = await telegram_utils2.create_tg_client(candidate_account)
            if test_client:
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤
                    async with test_client:
                        await test_client.get_me()
                    
                    self.current_account = candidate_account
                    self.logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç +{candidate_account.phone_number} (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1})")
                    return candidate_account
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç +{candidate_account.phone_number} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    self.current_account_index += 1
                    attempts += 1
                    continue
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è +{candidate_account.phone_number}")
                self.current_account_index += 1
                attempts += 1
                continue
        
        # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ - –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        self.logger.error("‚ùå –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∂–¥—É 5 –º–∏–Ω—É—Ç")
        await asyncio.sleep(300)
        await self.refresh_available_accounts()
        self.current_account_index = 0
        
        return None


    async def handle_account_error(self, error_message: str):
        if self.current_account:
            self.logger.warning(f"üîÑ –û—à–∏–±–∫–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞ +{self.current_account.phone_number}: {error_message}")
            
            # –ï—Å–ª–∏ FROZEN_METHOD_INVALID - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if "FROZEN_METHOD_INVALID" in error_message:
                self.logger.warning(f"üßä –£ –∞–∫–∫–∞—É–Ω—Ç–∞ +{self.current_account.phone_number} –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –º–µ—Ç–æ–¥—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å")
                self.current_account_index += 1
                self.current_account_reposts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
                return await self.get_current_working_account()
        
        return self.current_account

    async def increment_account_reposts(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ä–µ–ø–æ—Å—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.current_account_reposts += 1
        
        if self.current_account:
            self.logger.debug(f"üìä –†–µ–ø–æ—Å—Ç–æ–≤ —É +{self.current_account.phone_number}: {self.current_account_reposts}")
    
    async def _check_stop_links_in_message(self, telegram_client, channel, message_id, tg_accounts, task_logger) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            stop_links = await json_settings.async_get_attribute("stop_links")
            if not stop_links:
                return False

            async with telegram_client:
                message = await telegram_client.get_messages(channel.telegram_channel_id, ids=message_id)
                
                if not message or not message.message:
                    return False

                for stop_link in stop_links:
                    if stop_link in message.message:
                        task_logger.info(f"üö´ –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∞: {stop_link}")
                        
                        # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏–∏
                        await telegram_utils2.send_reaction_with_accounts_on_message(
                            tg_accounts=tg_accounts,
                            message=message,
                            channel_url=channel.url,
                            emoji_reaction=await json_settings.async_get_attribute("reaction")
                        )
                        
                        task_logger.success("‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–æ–π")
                        return True

            return False
            
        except Exception as e:
            task_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫: {e}")
            return False
    
    async def _process_channel_task_with_rotation(self, task: ChannelTask):
        start_time = datetime.now()
        task_logger = self.logger.bind(msg_id=task.message_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel = await channel_db.get_channel_by_telegram_channel_id(task.channel_id)
            if not channel:
                task_logger.error(f"–ö–∞–Ω–∞–ª {task.channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞–Ω–∞–ª–∞
            from core.models import group as group_db
            all_groups = await group_db.get_all_groups_by_channel_guid(self.channel_guid)
            if not all_groups:
                task_logger.warning("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∏–Ω–≥–∞")
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
            try:
                max_groups = await json_settings.async_get_attribute("max_groups_per_post")
                delay_between_groups = await json_settings.async_get_attribute("delay_between_groups")
                check_stop_links = await json_settings.async_get_attribute("check_stop_links")
            except:
                max_groups = 20
                delay_between_groups = 120
                check_stop_links = True
            
            selected_groups = random.sample(all_groups, min(max_groups, len(all_groups)))
            task_logger.info(f"üìä –í—ã–±—Ä–∞–Ω–æ {len(selected_groups)} –∏–∑ {len(all_groups)} –≥—Ä—É–ø–ø")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
            if check_stop_links:
                current_account = await self.get_current_working_account()
                if current_account:
                    temp_client = await telegram_utils2.create_tg_client(current_account)
                    if temp_client:
                        try:
                            stop_links_found = await self._check_stop_links_in_message(
                                temp_client, channel, task.message_id, [current_account], task_logger
                            )
                            if stop_links_found:
                                task_logger.info("üõë –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                                return
                        except Exception as e:
                            task_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫: {e}")
                        finally:
                            await temp_client.disconnect()
            
            # üöÄ –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –° –ê–í–¢–û–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï–ú –ü–†–ò –û–®–ò–ë–ö–ê–•
            successful_reposts = 0
            
            for i, group in enumerate(selected_groups, 1):
                group_logger = task_logger.bind(group_idx=i, total=len(selected_groups))
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
                    working_account = await self.get_current_working_account()
                    if not working_account:
                        group_logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                        break
                    
                    group_logger.info(f"üéØ –ì—Ä—É–ø–ø–∞ {i}: {group.url} (–∞–∫–∫–∞—É–Ω—Ç +{working_account.phone_number}, —Ä–µ–ø–æ—Å—Ç #{self.current_account_reposts + 1})")
                    
                    # üîÑ –ü–†–û–ë–£–ï–ú –ù–ï–°–ö–û–õ–¨–ö–û –ê–ö–ö–ê–£–ù–¢–û–í –î–õ–Ø –û–î–ù–û–ô –ì–†–£–ü–ü–´
                    repost_success = False
                    account_attempts = 0
                    max_account_attempts = min(3, len(self.available_accounts))  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    
                    while not repost_success and account_attempts < max_account_attempts:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                        telegram_client = await telegram_utils2.create_tg_client(working_account)
                        if not telegram_client:
                            group_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è +{working_account.phone_number}")
                            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
                            await self.handle_account_error("Client creation failed")
                            working_account = await self.get_current_working_account()
                            account_attempts += 1
                            continue
                        
                        try:
                            # –í—Å—Ç—É–ø–∞–µ–º –≤ –≥—Ä—É–ø–ø—É
                            join_success = await telegram_utils2.checking_and_joining_if_possible(
                                telegram_client=telegram_client,
                                url=group.url,
                                channel=channel
                            )
                            
                            if not join_success:
                                group_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É {group.url} —Å +{working_account.phone_number}")
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å–ª–∏ —ç—Ç–æ FROZEN_METHOD_INVALID, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
                                await self.handle_account_error("Join failed - possibly FROZEN_METHOD_INVALID")
                                working_account = await self.get_current_working_account()
                                account_attempts += 1
                            else:
                                # –î–µ–ª–∞–µ–º —Ä–µ–ø–æ—Å—Ç
                                repost_result = await telegram_utils2.repost_in_group_by_message_id(
                                    message_id=task.message_id,
                                    telegram_client=telegram_client,
                                    telegram_channel_id=channel.telegram_channel_id,
                                    channel_url=channel.url,
                                    group_url=group.url
                                )
                                
                                if repost_result:
                                    successful_reposts += 1
                                    await self.increment_account_reposts()
                                    repost_success = True
                                    
                                    group_logger.success(f"‚úÖ –†–µ–ø–æ—Å—Ç —É—Å–ø–µ—à–µ–Ω —Å +{working_account.phone_number} (#{self.current_account_reposts})")
                                    
                                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
                                    try:
                                        from core.schemas import repost as repost_schemas
                                        from core.models import repost as repost_db
                                        await repost_db.create_repost(
                                            repost_in=repost_schemas.RepostCreate(
                                                channel_guid=channel.guid,
                                                repost_message_id=task.message_id,
                                                created_at=datetime.now().date()
                                            )
                                        )
                                    except Exception as db_error:
                                        group_logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {db_error}")
                                else:
                                    group_logger.warning(f"‚ùå –†–µ–ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è —Å +{working_account.phone_number}")
                                    account_attempts += 1
                                    
                        except Exception as group_error:
                            error_str = str(group_error)
                            group_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–æ–π {group.url}: {group_error}")
                            
                            # –ï—Å–ª–∏ FROZEN_METHOD_INVALID - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç
                            if "FROZEN_METHOD_INVALID" in error_str:
                                await self.handle_account_error(error_str)
                                working_account = await self.get_current_working_account()
                            
                            account_attempts += 1
                            
                        finally:
                            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                            try:
                                await telegram_client.disconnect()
                            except:
                                pass
                    
                    if not repost_success:
                        group_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç –≤ {group.url} –ø–æ—Å–ª–µ {account_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                    if i < len(selected_groups):
                        await asyncio.sleep(delay_between_groups)
                            
                except Exception as group_error:
                    group_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group.url}: {group_error}")
                    await asyncio.sleep(delay_between_groups // 2)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            processing_time = (datetime.now() - start_time).total_seconds()
            success_rate = (successful_reposts / len(selected_groups) * 100) if selected_groups else 0
            
            task_logger.success(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful_reposts}/{len(selected_groups)} ({success_rate:.1f}%) –∑–∞ {processing_time:.1f}—Å")
            
            if self.current_account:
                task_logger.info(f"üìä –û–±—â–∏—Ö —Ä–µ–ø–æ—Å—Ç–æ–≤ —É –∞–∫–∫–∞—É–Ω—Ç–∞ +{self.current_account.phone_number}: {self.current_account_reposts}")
                
        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            task_logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.error_count += 1
    
    async def add_task(self, channel_id: int, message_id: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞"""
        try:
            task = ChannelTask(
                channel_id=channel_id,
                message_id=message_id,
                timestamp=datetime.now()
            )
            
            self.task_queue.put_nowait(task)
            
            queue_size = self.task_queue.qsize()
            self.logger.info(f"‚ûï –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä: {queue_size}")
            
            return True
            
        except asyncio.QueueFull:
            self.logger.error(f"üö´ –û—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞ {self.channel_url} –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = False
        self.logger.info(f"üõë –í–æ—Ä–∫–µ—Ä {self.worker_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_count}")
    
    def get_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        return {
            'worker_id': self.worker_id,
            'channel_guid': self.channel_guid,
            'channel_url': self.channel_url,
            'processed_count': self.processed_count,
            'error_count': self.error_count,
            'running': self.running,
            'queue_size': self.task_queue.qsize(),
            'cached_accounts': len(self.account_groups_cache),
            'total_cached_groups': sum(len(groups) for groups in self.account_groups_cache.values()),
            'current_task': {
                'channel_id': self.current_task.channel_id if self.current_task else None,
                'message_id': self.current_task.message_id if self.current_task else None,
                'started_at': self.current_task.timestamp if self.current_task else None
            } if self.current_task else None,
            'rotation': self.get_rotation_stats()
        }
    
    def get_rotation_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return {
            'current_account_index': self.current_account_index,
            'current_account_reposts': self.current_account_reposts,
            'current_account_phone': self.current_account.phone_number if self.current_account else None,
            'available_accounts_count': len(self.available_accounts),
            'last_accounts_refresh': self.last_accounts_refresh
        }


class ChannelProcessor:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Ä–∫–µ—Ä–æ–≤ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.channel_workers: Dict[str, ChannelWorker] = {}
        self.worker_tasks: Dict[str, asyncio.Task] = {}
        self.running = False
        self.start_time = datetime.now()
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π
        self.processing_messages: Dict[str, Set[tuple]] = {}
        
        logger.info("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    async def _channel_has_accounts(self, channel_guid: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∫–∞–Ω–∞–ª–∞ —Ä–∞–±–æ—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        try:
            accounts = await tg_account_db.get_working_accounts_by_channel(channel_guid)
            return len(accounts) > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_guid}: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        self.running = True
        
        channels = await channel_db.get_channels()
        if not channels:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        active_channels = 0
        for i, channel in enumerate(channels):
            channel_guid = str(channel.guid)
            
            if await self._channel_has_accounts(channel_guid):
                worker = ChannelWorker(
                    channel_guid=channel_guid,
                    channel_url=channel.url,
                    worker_id=i + 1
                )
                
                self.channel_workers[channel_guid] = worker
                self.processing_messages[channel_guid] = set()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
                task = asyncio.create_task(worker.start())
                self.worker_tasks[channel_guid] = task
                
                active_channels += 1
                logger.info(f"‚úÖ –í–æ—Ä–∫–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url}")
            else:
                logger.info(f"‚è≠Ô∏è –ö–∞–Ω–∞–ª {channel.url} –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        logger.success(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {active_channels} –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π")
    
    async def ensure_worker_for_channel(self, channel_guid: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if channel_guid in self.channel_workers:
            return True
            
        if not await self._channel_has_accounts(channel_guid):
            return False
        
        try:
            channel = await channel_db.get_channel_by_guid(channel_guid)
            if not channel:
                return False
            
            worker_id = len(self.channel_workers) + 1
            worker = ChannelWorker(
                channel_guid=channel_guid,
                channel_url=channel.url,
                worker_id=worker_id
            )
            
            self.channel_workers[channel_guid] = worker
            self.processing_messages[channel_guid] = set()
            
            task = asyncio.create_task(worker.start())
            self.worker_tasks[channel_guid] = task
            
            logger.success(f"üéâ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_guid}: {e}")
            return False
    
    async def remove_worker_if_no_accounts(self, channel_guid: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤–æ—Ä–∫–µ—Ä –µ—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if channel_guid not in self.channel_workers:
            return True
            
        if await self._channel_has_accounts(channel_guid):
            return False
        
        try:
            worker = self.channel_workers[channel_guid]
            worker.stop()
            
            if channel_guid in self.worker_tasks:
                task = self.worker_tasks[channel_guid]
                if not task.done():
                    task.cancel()
                del self.worker_tasks[channel_guid]
            
            del self.channel_workers[channel_guid]
            if channel_guid in self.processing_messages:
                del self.processing_messages[channel_guid]
            
            logger.info(f"üóëÔ∏è –í–æ—Ä–∫–µ—Ä –∫–∞–Ω–∞–ª–∞ {worker.channel_url} —É–¥–∞–ª–µ–Ω - –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞ {channel_guid}: {e}")
            return False
    
    async def add_message(self, channel_id: int, message_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞"""
        if not self.running:
            logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return False
        
        try:
            channel = await channel_db.get_channel_by_telegram_channel_id(channel_id)
            if not channel:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return False
            
            channel_guid = str(channel.guid)
            
            if not await self.ensure_worker_for_channel(channel_guid):
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url}")
                return False
            
            if channel_guid not in self.channel_workers:
                logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π
            message_key = (channel_id, message_id)
            if message_key in self.processing_messages[channel_guid]:
                logger.warning(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∫–∞–Ω–∞–ª–∞ {channel.url} —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            worker = self.channel_workers[channel_guid]
            success = await worker.add_task(channel_id, message_id)
            
            if success:
                self.processing_messages[channel_guid].add(message_key)
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
                asyncio.create_task(self._cleanup_processed_message(channel_guid, message_key, delay=3600))
                
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–æ—Ä–∫–µ—Ä—É —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–∞–Ω–∞–ª–∞ {channel.url}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _cleanup_processed_message(self, channel_guid: str, message_key: tuple, delay: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π"""
        try:
            await asyncio.sleep(delay)
            if channel_guid in self.processing_messages:
                self.processing_messages[channel_guid].discard(message_key)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π: {e}")
    
    def get_stats(self) -> dict:
        """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        if not self.channel_workers:
            return {
                'running': self.running,
                'channels_count': 0,
                'total_processed': 0,
                'total_errors': 0,
                'workers': []
            }
        
        total_processed = sum(worker.processed_count for worker in self.channel_workers.values())
        total_errors = sum(worker.error_count for worker in self.channel_workers.values())
        uptime = (datetime.now() - self.start_time).total_seconds()
        
        workers_stats = [worker.get_stats() for worker in self.channel_workers.values()]
        
        active_channels = sum(1 for w in self.channel_workers.values() if w.current_task is not None)
        total_queue_size = sum(w.task_queue.qsize() for w in self.channel_workers.values())
        total_cached_groups = sum(w.get_stats().get('total_cached_groups', 0) for w in self.channel_workers.values())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏
        total_account_reposts = sum(w.current_account_reposts for w in self.channel_workers.values())
        active_accounts = len([w for w in self.channel_workers.values() if w.current_account])
        
        return {
            'running': self.running,
            'uptime_seconds': uptime,
            'channels_count': len(self.channel_workers),
            'active_channels': active_channels,
            'total_queue_size': total_queue_size,
            'total_cached_groups': total_cached_groups,
            'total_processed': total_processed,
            'total_errors': total_errors,
            'success_rate': (total_processed / (total_processed + total_errors) * 100) if (total_processed + total_errors) > 0 else 0,
            'messages_per_hour': (total_processed / (uptime / 3600)) if uptime > 0 else 0,
            'rotation_stats': {
                'total_account_reposts': total_account_reposts,
                'active_accounts': active_accounts
            },
            'workers': workers_stats
        }
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        if not self.running:
            return
            
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        for worker in self.channel_workers.values():
            worker.stop()
        
        # –ñ–¥–µ–º –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
        for channel_guid, worker in self.channel_workers.items():
            try:
                await asyncio.wait_for(worker.task_queue.join(), timeout=60.0)
                logger.debug(f"‚úÖ –û—á–µ—Ä–µ–¥—å –∫–∞–Ω–∞–ª–∞ {worker.channel_url} –æ—á–∏—â–µ–Ω–∞")
            except asyncio.TimeoutError:
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–Ω–∞–ª–∞ {worker.channel_url}")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        for task in self.worker_tasks.values():
            if not task.done():
                task.cancel()
        
        if self.worker_tasks:
            try:
                await asyncio.wait(self.worker_tasks.values(), timeout=15.0)
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è")
        
        self.running = False
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.get_stats()
        logger.success(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ö–∞–Ω–∞–ª–æ–≤: {stats['channels_count']}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_processed']}")
        
        # –û—á–∏—Å—Ç–∫–∞
        self.channel_workers.clear()
        self.worker_tasks.clear()
        self.processing_messages.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
channel_processor = ChannelProcessor()
