import asyncio
from datetime import datetime
from typing import Dict, Set
from dataclasses import dataclass
from loguru import logger


@dataclass
class MessageTask:
    channel_id: int
    message_id: int
    timestamp: datetime


class MessageWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, worker_id: int, task_queue: asyncio.Queue):
        self.worker_id = worker_id
        self.task_queue = task_queue
        self.running = False
        self.processed_count = 0
        self.error_count = 0
        self.current_task = None
        self.logger = logger.bind(worker_id=worker_id)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = True
        self.logger.info(f"üöÄ –í–æ—Ä–∫–µ—Ä {self.worker_id} –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                task = await asyncio.wait_for(
                    self.task_queue.get(), 
                    timeout=5.0
                )
                
                self.current_task = task
                await self._process_task(task)
                self.task_queue.task_done()
                self.processed_count += 1
                self.current_task = None
                
            except asyncio.TimeoutError:
                # –ù–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                continue
            except Exception as e:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ: {e}")
                self.error_count += 1
                self.current_task = None
                await asyncio.sleep(1)
    
    async def _process_task(self, task: MessageTask):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        start_time = datetime.now()
        self.logger.info(f"üì® –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {task.message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {task.channel_id}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ process_post3.py
            from process_post3 import new_message_in_channel
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            await new_message_in_channel(
                telegram_channel_id=task.channel_id,
                telegram_message_id=task.message_id
            )
            
            processing_time = (datetime.now() - start_time).total_seconds()
            self.logger.success(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {task.message_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.1f} —Å–µ–∫")
            
        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {task.message_id} –∑–∞ {processing_time:.1f} —Å–µ–∫: {e}")
            self.error_count += 1
            raise  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = False
        self.logger.info(f"üõë –í–æ—Ä–∫–µ—Ä {self.worker_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_count}, –æ—à–∏–±–æ–∫: {self.error_count}")
    
    def get_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        return {
            'worker_id': self.worker_id,
            'processed_count': self.processed_count,
            'error_count': self.error_count,
            'running': self.running,
            'current_task': {
                'channel_id': self.current_task.channel_id if self.current_task else None,
                'message_id': self.current_task.message_id if self.current_task else None,
                'started_at': self.current_task.timestamp if self.current_task else None
            } if self.current_task else None
        }


class MessageProcessor:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, num_workers: int = 3, max_queue_size: int = 100):
        self.num_workers = num_workers
        self.task_queue = asyncio.Queue(maxsize=max_queue_size)
        self.workers: Dict[int, MessageWorker] = {}
        self.worker_tasks: Dict[int, asyncio.Task] = {}
        self.running = False
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π
        self.processing_messages: Set[tuple] = set()
        self.start_time = datetime.now()
        
        logger.info(f"üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å {num_workers} –≤–æ—Ä–∫–µ—Ä–∞–º–∏, –º–∞–∫—Å. –æ—á–µ—Ä–µ–¥—å: {max_queue_size}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        self.running = True
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
        for i in range(self.num_workers):
            worker = MessageWorker(i + 1, self.task_queue)
            self.workers[i] = worker
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            task = asyncio.create_task(worker.start())
            self.worker_tasks[i] = task
        
        logger.success(f"‚úÖ –í—Å–µ {self.num_workers} –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã")
    
    async def add_message(self, channel_id: int, message_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –¥—É–±–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.running:
            logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return False
            
        message_key = (channel_id, message_id)
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π
        if message_key in self.processing_messages:
            logger.warning(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            return False
        
        try:
            task = MessageTask(
                channel_id=channel_id,
                message_id=message_id,
                timestamp=datetime.now()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
            self.task_queue.put_nowait(task)
            self.processing_messages.add(message_key)
            
            logger.info(f"‚ûï –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self.task_queue.qsize()}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π —á–µ—Ä–µ–∑ —á–∞—Å
            asyncio.create_task(self._cleanup_processed_message(message_key, delay=3600))
            
            return True
            
        except asyncio.QueueFull:
            logger.error(f"üö´ –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞! –†–∞–∑–º–µ—Ä: {self.task_queue.qsize()}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
    
    async def _cleanup_processed_message(self, message_key: tuple, delay: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥"""
        try:
            await asyncio.sleep(delay)
            self.processing_messages.discard(message_key)
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –¥–ª—è {message_key}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π: {e}")
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_processed = sum(worker.processed_count for worker in self.workers.values())
        total_errors = sum(worker.error_count for worker in self.workers.values())
        uptime = (datetime.now() - self.start_time).total_seconds()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ—Ä–∫–µ—Ä–∞–º
        workers_stats = [worker.get_stats() for worker in self.workers.values()]
        
        return {
            'running': self.running,
            'uptime_seconds': uptime,
            'workers_count': len(self.workers),
            'queue_size': self.task_queue.qsize(),
            'processing_messages_count': len(self.processing_messages),
            'total_processed': total_processed,
            'total_errors': total_errors,
            'success_rate': (total_processed / (total_processed + total_errors) * 100) if (total_processed + total_errors) > 0 else 0,
            'messages_per_hour': (total_processed / (uptime / 3600)) if uptime > 0 else 0,
            'workers': workers_stats
        }
    
    def get_simple_stats(self) -> dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤"""
        total_processed = sum(worker.processed_count for worker in self.workers.values())
        return {
            'queue_size': self.task_queue.qsize(),
            'total_processed': total_processed,
            'running_workers': sum(1 for w in self.workers.values() if w.running)
        }
    
    async def wait_for_completion(self, timeout: int = 300):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (—Ç–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫)")
        try:
            await asyncio.wait_for(self.task_queue.join(), timeout=timeout)
            logger.success("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except asyncio.TimeoutError:
            logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        if not self.running:
            return
            
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        for worker in self.workers.values():
            worker.stop()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
        try:
            await asyncio.wait_for(self.task_queue.join(), timeout=30.0)
            logger.info("‚úÖ –í—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except asyncio.TimeoutError:
            logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
        for task in self.worker_tasks.values():
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if self.worker_tasks:
            try:
                await asyncio.wait(self.worker_tasks.values(), timeout=5.0)
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è")
        
        self.running = False
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.get_stats()
        logger.success(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_processed']}, –æ—à–∏–±–æ–∫: {stats['total_errors']}")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        self.workers.clear()
        self.worker_tasks.clear()
        self.processing_messages.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ –±–æ—Ç–∞ –∏–ª–∏ API)
def get_global_processor_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ message_processor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ main
    try:
        from auto_reposting.__main__ import message_processor
        return message_processor.get_stats()
    except ImportError:
        return {"error": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}