import argparse
import asyncio
from datetime import datetime
from typing import List

from loguru import logger
from opentele.tl import TelegramClient
from telethon import errors

from auto_reposting import telegram_utils, exc, telegram_utils2

from core.schemas import repost as repost_schemas
from core.models import tg_account as tg_account_db, channel as channel_db, group as group_db, repost as repost_db
from core.settings import json_settings, settings


async def cleanup_clients(clients_to_cleanup: List[TelegramClient]) -> None:
    """–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"""
    cleanup_count = 0
    for client in clients_to_cleanup:
        if client:
            try:
                await client.disconnect()
                cleanup_count += 1
                logger.debug("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    if cleanup_count > 0:
        logger.info(f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ {cleanup_count} –∫–ª–∏–µ–Ω—Ç–æ–≤")


async def check_stop_link_in_message(
        tg_accounts: List[tg_account_db.TGAccount],
        telegram_client: TelegramClient,
        channel_url: str,
        telegram_channel_id: int,
        telegram_message_id: int
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã"""
    try:
        stop_links = await json_settings.async_get_attribute("stop_links")
        if not stop_links:
            return False

        async with telegram_client:
            await telegram_client.get_entity(channel_url)
            message = await telegram_client.get_messages(telegram_channel_id, ids=telegram_message_id)
            
            if not message or not message.message:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–æ–ø-—Å—Å—ã–ª–∫—É
            for stop_link in stop_links:
                if stop_link in message.message:
                    logger.info(f"üö´ –í –ø–æ—Å—Ç–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∞: {stop_link}")
                    
                    # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏–∏
                    await telegram_utils2.send_reaction_with_accounts_on_message(
                        tg_accounts=tg_accounts,
                        message=message,
                        channel_url=channel_url,
                        emoji_reaction=await json_settings.async_get_attribute("reaction")
                    )
                    
                    logger.success("‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–æ–π")
                    return True

        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫: {e}")
        return False


async def repost_to_group_batch(
        groups_batch: List[group_db.Group],
        channel: channel_db.Channel,
        telegram_message_id: int,
        telegram_client: TelegramClient,
        batch_id: int
) -> tuple[int, List[str]]:
    """üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –≥—Ä—É–ø–ø –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
    successful_reposts = 0
    processed_groups = []
    
    logger.info(f"üì¶ Batch {batch_id}: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(groups_batch)} –≥—Ä—É–ø–ø")
    start_time = datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø –≤ –ø–∞–∫–µ—Ç–µ
    tasks = []
    for i, group in enumerate(groups_batch):
        task = asyncio.create_task(
            repost_to_single_group(
                group=group,
                channel=channel,
                telegram_message_id=telegram_message_id,
                telegram_client=telegram_client,
                group_index=i + 1,
                batch_id=batch_id
            )
        )
        tasks.append((task, group))
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –ø–∞–∫–µ—Ç–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        results = await asyncio.wait_for(
            asyncio.gather(*[task for task, _ in tasks], return_exceptions=True),
            timeout=300.0  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞–∫–µ—Ç
        )
    except asyncio.TimeoutError:
        logger.error(f"‚ùå Batch {batch_id}: –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞")
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task, _ in tasks:
            if not task.done():
                task.cancel()
        return 0, []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for i, (result, (_, group)) in enumerate(zip(results, tasks)):
        try:
            if isinstance(result, Exception):
                logger.error(f"‚ùå Batch {batch_id}: –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {group.url}: {result}")
            elif result:
                successful_reposts += 1
                processed_groups.append(group.url)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–ø–æ—Å—Ç –≤ –±–∞–∑—É
                try:
                    await repost_db.create_repost(
                        repost_in=repost_schemas.RepostCreate(
                            channel_guid=channel.guid,
                            repost_message_id=telegram_message_id,
                            created_at=datetime.now().date()
                        )
                    )
                    logger.debug(f"üìä –†–µ–ø–æ—Å—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î –¥–ª—è –≥—Ä—É–ø–ø—ã {group.url}")
                except Exception as db_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –≥—Ä—É–ø–ø—ã {group.url}: {db_error}")
                    
                logger.success(f"‚úÖ Batch {batch_id}: –†–µ–ø–æ—Å—Ç –≤ {group.url}")
            else:
                logger.warning(f"‚ö†Ô∏è Batch {batch_id}: –†–µ–ø–æ—Å—Ç –≤ {group.url} –Ω–µ —É–¥–∞–ª—Å—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {group.url}: {e}")
    
    processing_time = (datetime.now() - start_time).total_seconds()
    success_rate = (successful_reposts / len(groups_batch) * 100) if groups_batch else 0
    
    logger.success(f"üéØ Batch {batch_id}: –ó–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.1f}—Å. –£—Å–ø–µ—à–Ω–æ: {successful_reposts}/{len(groups_batch)} ({success_rate:.1f}%)")
    
    return successful_reposts, processed_groups


async def repost_to_single_group(
        group: group_db.Group,
        channel: channel_db.Channel,
        telegram_message_id: int,
        telegram_client: TelegramClient,
        group_index: int = 0,
        batch_id: int = 0
) -> bool:
    """–î–µ–ª–∞–µ—Ç —Ä–µ–ø–æ—Å—Ç –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    max_attempts = 2
    group_logger = logger.bind(batch=batch_id, group_idx=group_index)
    
    for attempt in range(max_attempts):
        try:
            group_logger.debug(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {group.url}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
            join_success = await telegram_utils2.checking_and_joining_if_possible(
                telegram_client=telegram_client,
                url=group.url,
                channel=channel
            )
            
            if not join_success:
                if attempt < max_attempts - 1:
                    await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    continue
                else:
                    group_logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É {group.url}")
                    return False
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç
            repost_success = await telegram_utils2.repost_in_group_by_message_id(
                message_id=telegram_message_id,
                telegram_client=telegram_client,
                telegram_channel_id=channel.telegram_channel_id,
                channel_url=channel.url,
                group_url=group.url
            )
            
            if repost_success:
                group_logger.success(f"‚úÖ –†–µ–ø–æ—Å—Ç –≤ {group.url}")
                return True
            elif attempt < max_attempts - 1:
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º —Ä–µ–ø–æ—Å—Ç–∞
            
        except errors.FloodWaitError as e:
            group_logger.warning(f"‚è≥ FloodWait –≤ –≥—Ä—É–ø–ø–µ {group.url}: {e}")
            return False  # –ü—Ä–∏ FloodWait –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        except (errors.ChatWriteForbiddenError, errors.UserBannedInChannelError) as e:
            group_logger.warning(f"üö´ –ë–∞–Ω/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ {group.url}: {type(e).__name__}")
            return False  # –ü—Ä–∏ –±–∞–Ω–∞—Ö –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        except Exception as e:
            group_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç–µ –≤ {group.url}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
            if attempt < max_attempts - 1:
                await asyncio.sleep(1)
    
    group_logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç –≤ {group.url} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return False


def calculate_optimal_batch_size(num_groups: int, num_accounts: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if num_groups <= 10:
        return max(2, num_groups // 2)
    elif num_groups <= 50:
        return min(8, max(3, num_groups // num_accounts)) if num_accounts > 0 else 5
    else:
        return min(12, max(5, num_groups // (num_accounts * 2))) if num_accounts > 0 else 8


async def process_group_reposting_fast(
        channel: channel_db.Channel,
        tg_accounts: List[tg_account_db.TGAccount],
        groups: List[group_db.Group],
        telegram_message_id: int
) -> None:
    all_clients_used = []
    
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        working_accounts = [acc for acc in tg_accounts if acc.status == "WORKING"]
        if not working_accounts:
            await telegram_utils.send_message(
                chat_id=settings.admin_chat_id, 
                text=f"‚ùå –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
            )
            return

        logger.info(f"üöÄ –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú: {len(working_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ‚ûú {len(groups)} –≥—Ä—É–ø–ø")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            number_reposts_before_pause = await json_settings.async_get_attribute("number_reposts_before_pause")
            pause_after_rate_reposts = await json_settings.async_get_attribute("pause_after_rate_reposts")
            pause_between_reposts = await json_settings.async_get_attribute("pause_between_reposts")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—é —É–º–æ–ª—á–∞–Ω–∏—è: {e}")
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
            number_reposts_before_pause = 15
            pause_after_rate_reposts = 3600   
            pause_between_reposts = 25        

        # üéØ –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
        batch_size = calculate_optimal_batch_size(len(groups), len(working_accounts))
        logger.info(f"üì¶ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch_size} –≥—Ä—É–ø–ø")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –Ω–∞ –ø–∞–∫–µ—Ç—ã
        group_batches = [groups[i:i + batch_size] for i in range(0, len(groups), batch_size)]
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(group_batches)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        account_index = 0
        telegram_client = None
        counter_reposts_current_account = 0
        total_successful_reposts = 0
        start_time = datetime.now()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –∫–ª–∏–µ–Ω—Ç
            telegram_client, account_index = await telegram_utils2.get_authorized_tg_client_with_check_pause(
                accounts=working_accounts,
                start_index=account_index
            )
            if telegram_client:
                all_clients_used.append(telegram_client)
            else:
                raise exc.NoAccounts("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
                
        except exc.NoAccounts:
            await telegram_utils.send_message(
                chat_id=settings.admin_chat_id, 
                text=f"‚ùå –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
        try:
            if await check_stop_link_in_message(
                tg_accounts=working_accounts, 
                telegram_client=telegram_client, 
                channel_url=channel.url,
                telegram_channel_id=channel.telegram_channel_id,
                telegram_message_id=telegram_message_id
            ):
                logger.info("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ —Å—Ç–æ–ø-—Å—Å—ã–ª–∫–∏")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–æ–ø-—Å—Å—ã–ª–æ–∫: {e}")

        # üöÄ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –≥—Ä—É–ø–ø –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        for batch_idx, group_batch in enumerate(group_batches, 1):
            batch_start_time = datetime.now()
            logger.info(f"üéØ –ü–∞–∫–µ—Ç {batch_idx}/{len(group_batches)}: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            if counter_reposts_current_account >= number_reposts_before_pause:
                logger.info(f"üîÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–µ–ø–æ—Å—Ç–æ–≤ ({number_reposts_before_pause}), –º–µ–Ω—è—é –∞–∫–∫–∞—É–Ω—Ç")
                
                # –°—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–∞—É–∑—É
                current_account = working_accounts[account_index]
                await tg_account_db.add_pause(
                    tg_account=current_account,
                    pause_in_seconds=pause_after_rate_reposts
                )
                
                pause_minutes = pause_after_rate_reposts // 60
                logger.info(f"‚è∏Ô∏è –ê–∫–∫–∞—É–Ω—Ç +{current_account.phone_number} –Ω–∞ –ø–∞—É–∑–µ {pause_minutes} –º–∏–Ω")

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç
                if telegram_client:
                    try:
                        await telegram_client.disconnect()
                        logger.debug("üîå –°—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                    except:
                        pass
                    telegram_client = None

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
                account_index += 1
                try:
                    telegram_client, account_index = await telegram_utils2.get_authorized_tg_client_with_check_pause(
                        accounts=working_accounts,
                        start_index=account_index
                    )
                    if telegram_client:
                        all_clients_used.append(telegram_client)
                    else:
                        raise exc.NoAccounts("–ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
                        
                    counter_reposts_current_account = 0
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç +{working_accounts[account_index].phone_number}")
                    
                except exc.NoAccounts:
                    logger.warning("üîö –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    processing_time = (datetime.now() - start_time).total_seconds()
                    await telegram_utils.send_message(
                        chat_id=settings.admin_chat_id, 
                        text=f"‚èπÔ∏è –†–µ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç—ã\n"
                              f"üìä –ö–∞–Ω–∞–ª: {channel.url}\n"
                              f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–ø–æ—Å—Ç–æ–≤: {total_successful_reposts}\n"
                              f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {processing_time/60:.1f} –º–∏–Ω"
                    )
                    return

            # üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –≥—Ä—É–ø–ø –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            try:
                batch_successful, processed_groups = await repost_to_group_batch(
                    groups_batch=group_batch,
                    channel=channel,
                    telegram_message_id=telegram_message_id,
                    telegram_client=telegram_client,
                    batch_id=batch_idx
                )
                
                counter_reposts_current_account += batch_successful
                total_successful_reposts += batch_successful
                
                batch_time = (datetime.now() - batch_start_time).total_seconds()
                logger.info(f"üìä –ü–∞–∫–µ—Ç {batch_idx}: {batch_successful} —Ä–µ–ø–æ—Å—Ç–æ–≤ –∑–∞ {batch_time:.1f}—Å")
                
                # üéØ –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ü–ê–£–ó–ê: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞–∫–µ—Ç–∞
                if batch_idx < len(group_batches):  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                    if batch_successful > len(group_batch) * 0.7:  # >70% —É—Å–ø–µ—Ö–∞
                        adaptive_pause = max(pause_between_reposts // 2, 15)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                        logger.debug(f"‚úÖ –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞: {adaptive_pause}—Å")
                    elif batch_successful > 0:  # –ï—Å—Ç—å —É—Å–ø–µ—Ö–∏
                        adaptive_pause = pause_between_reposts  # –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞
                        logger.debug(f"‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞: {adaptive_pause}—Å")
                    else:  # –ù–µ—É–¥–∞—á–Ω—ã–π –ø–∞–∫–µ—Ç
                        adaptive_pause = pause_between_reposts * 2  # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞
                        logger.debug(f"‚ùå –ü–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞: {adaptive_pause}—Å")
                    
                    logger.info(f"‚è±Ô∏è –ü–∞—É–∑–∞ {adaptive_pause}—Å –ø–µ—Ä–µ–¥ –ø–∞–∫–µ—Ç–æ–º {batch_idx + 1}")
                    await asyncio.sleep(adaptive_pause)
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ {batch_idx}: {e}")
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –¥–µ–ª–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –ø–∞—É–∑—É
                error_pause = pause_between_reposts * 3
                logger.warning(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {error_pause}—Å –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                await asyncio.sleep(error_pause)

        # üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        total_time = (datetime.now() - start_time).total_seconds()
        success_rate = (total_successful_reposts / len(groups) * 100) if groups else 0
        speed = (total_successful_reposts / (total_time / 60)) if total_time > 0 else 0
        
        logger.success(f"üèÅ –ó–ê–í–ï–†–®–ï–ù–û: {total_successful_reposts}/{len(groups)} —Ä–µ–ø–æ—Å—Ç–æ–≤ ({success_rate:.1f}%)")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ä–µ–ø–æ—Å—Ç–æ–≤/–º–∏–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            status_emoji = "‚úÖ" if success_rate >= 70 else "‚ö†Ô∏è" if success_rate >= 30 else "‚ùå"
            await telegram_utils.send_message(
                chat_id=settings.admin_chat_id,
                text=f"{status_emoji} –†–µ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω\n"
                      f"üì∫ –ö–∞–Ω–∞–ª: {channel.url}\n"
                      f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {total_successful_reposts}/{len(groups)} ({success_rate:.1f}%)\n"
                      f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω\n"
                      f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ä–µ–ø–æ—Å—Ç–æ–≤/–º–∏–Ω"
            )
        except Exception as notification_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_error}")

    finally:
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        logger.info(f"üîå –ó–∞–∫—Ä—ã–≤–∞—é {len(all_clients_used)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        await cleanup_clients(all_clients_used)
        logger.success("‚úÖ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")


async def new_message_in_channel(telegram_channel_id: int, telegram_message_id: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ - –£–°–ö–û–†–ï–ù–ù–ê–Ø –∏ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è"""
    processing_start = datetime.now()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã
        channel = await channel_db.get_channel_by_telegram_channel_id(telegram_channel_id=telegram_channel_id)
        if not channel:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {telegram_channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        logger.info(f"üöÄ –ë–´–°–¢–†–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê —Å–æ–æ–±—â–µ–Ω–∏—è {telegram_message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel.url}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫–∞–Ω–∞–ª–∞
        tg_accounts = await tg_account_db.get_tg_accounts_by_channel_guid(channel_guid=str(channel.guid))
        if not tg_accounts:
            logger.warning(f"‚ö†Ô∏è –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            await telegram_utils.send_message(
                chat_id=settings.admin_chat_id, 
                text=f"‚ö†Ô∏è –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∏–Ω–≥–∞."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞–Ω–∞–ª–∞
        groups = await group_db.get_all_groups_by_channel_guid(channel_guid=str(channel.guid))
        if not groups:
            logger.warning(f"‚ö†Ô∏è –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            await telegram_utils.send_message(
                chat_id=settings.admin_chat_id, 
                text=f"‚ö†Ô∏è –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∏–Ω–≥–∞."
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        working_accounts = [acc for acc in tg_accounts if acc.status == "WORKING"]
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(working_accounts)}/{len(tg_accounts)} —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ {len(groups)} –≥—Ä—É–ø–ø")

        if not working_accounts:
            logger.error(f"‚ùå –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            await telegram_utils.send_message(
                chat_id=settings.admin_chat_id, 
                text=f"‚ùå –£ –∫–∞–Ω–∞–ª–∞ {channel.url} –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–∞ –ø–∞—É–∑–µ."
            )
            return

        
        await process_group_reposting_fast(
            channel=channel,
            tg_accounts=tg_accounts,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            groups=groups,
            telegram_message_id=telegram_message_id
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        total_processing_time = (datetime.now() - processing_start).total_seconds()
        logger.success(f"üéâ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_processing_time:.1f} —Å–µ–∫—É–Ω–¥")

    except Exception as e:
        processing_time = (datetime.now() - processing_start).total_seconds()
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {telegram_message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {telegram_channel_id} –∑–∞ {processing_time:.1f}—Å: {e}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_summary = str(e)[:150] + "..." if len(str(e)) > 150 else str(e)
            await telegram_utils.send_message(
                chat_id=settings.admin_chat_id, 
                text=f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {telegram_message_id}\n"
                      f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_summary}\n"
                      f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å"
            )
        except Exception as notification_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {notification_error}")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è subprocess (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--telegram_message_id', type=int, required=True, help='The ID of the message')
    parser.add_argument('--telegram_channel_id', type=int, required=True, help='The ID of the channel')
    parser.add_argument('--log_filename', type=str, required=True, help='The log filename')

    args = parser.parse_args()
    telegram_channel_id = args.telegram_channel_id
    telegram_message_id = args.telegram_message_id

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è subprocess
    logger.add(
        f"logs/{args.log_filename.replace('.log', '')}/{telegram_channel_id}-{telegram_message_id}.log", 
        rotation="1 day", 
        retention="10 days", 
        compression="zip"
    )
    
    logger.info(f"üöÄ –ë–´–°–¢–†–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê —Å–æ–æ–±—â–µ–Ω–∏—è ID {telegram_message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ ID {telegram_channel_id}")

    try:
        asyncio.run(new_message_in_channel(
            telegram_channel_id=telegram_channel_id, 
            telegram_message_id=telegram_message_id
        ))
        logger.info("‚úÖ Subprocess –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.exception(f"üí• SUBPROCESS –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô: {e.__class__.__name__}: {e}")
        exit(1)